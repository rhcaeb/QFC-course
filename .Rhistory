fish1 <- 25;
fish2 <- 26;
fish3 <- 20;
fish4 <- 22;
fish5 <- 32;
mnLength <- (fish1 + fish2 + fish3 + fish4 + fish5) / 5; # mean length
mnLength <- (fish1 + fish2 + fish3 + fish4 + fish5) / 5; # mean length
varLength <- ((fish1 - mnLength)^2 + (fish2 - mnLength)^2 + (fish3 - mnLength)^2 + (fish4 - mnLength)^2 + (fish5 - mnLength)^2) / 5; # variance
((fish1 - mnLength)^2 + (fish2 - mnLength)^2 + (fish3 - mnLength)^2 + (fish4 - mnLength)^2 + (fish5 - mnLength)^2) / 5; # variance
var(c(fish1,fish2,fish3,fish4,fish5))
sqrt(varLength)
varLength^1/2
varLength^(1/2)
sdLength <- sqrt(varLength) # standard deviation, OR simply, square root of the variance
rm(list=ls())
{
rm(list=ls()); # clean out the environment
options(show.error.locations = T); # give line numbers on errors
# Individual Fish Length (cm) Values:
fish1 <- 25;
fish2 <- 26;
fish3 <- 20;
fish4 <- 22;
fish5 <- 32;
# Calculate Mean
mnLength <- (fish1 + fish2 + fish3 + fish4 + fish5) / 5; # mean length
# Calculate Variance
varLength <- ((fish1 - mnLength)^2 + (fish2 - mnLength)^2 + (fish3 - mnLength)^2 + (fish4 - mnLength)^2 + (fish5 - mnLength)^2) / 5; # variance
# Calculate Standard Deviation
sdLength <- sqrt(varLength) # standard deviation, OR simply, square root of the variance
# OR varLength^(1/2)
}
rm(list=ls())
{
rm(list=ls()) # clean out the environment
options(show.error.locations = TRUE) # give line numbers on errors
fish1Weight <- 45
fish2Weight <- 64
fish3Weight <- 50
fish4Weight <- 58
fish5Weight <- 49
# solve for the mean fish weight
meanWeight <- fish1Weight + fish2Weight + fish3Weight + fish4Weight + fish5Weight / 5
# solve for the variance of each fish
fish1Var <- (fish1Weight - meanWeight)^2
fish2Var <- (fish1Weight - meanWeight)^2
fish3Var <- (fish1Weight - meanWeight)^2
fish4Var <- (fish1Weight - meanWeight)^2
fish5Var <- (fish1Weight - meanWeight)^2
# find the variance of the sample
weightVariance <- (fish1Var + fish2Var + fish3Var + fish4Var + fish5Var / 5)
# solve for the standard deviation in the fish weight
weightStandardDev == (weightVariance) ^ 1/2
# solve for the 95% CI
Z <- 1.960;
lowEnd <- meanWeight - z(weightStandardDev / 5^2)
highEnd <- meanWeight + z(weightStandardDev / 5^2)
}
rm(list=ls())
{
rm(list=ls());                       # clean out the environment
options(show.error.locations = TRUE);  # give line numbers on errors
fish1Weight <- 45;
fish2Weight <- 64;
fish3Weight <- 50;
fish4Weight <- 58;
fish5Weight <- 49;
# solve for the mean fish weight
meanWeight <- (fish1Weight + fish2Weight + fish3Weight + fish4Weight + fish5Weight) /5;
# solve the variance for each fish
fish1Var <- (fish1Weight - meanWeight)^2;
fish2Var <- (fish2Weight - meanWeight)^2;
fish3Var <- (fish3Weight - meanWeight)^2;
fish4Var <- (fish4Weight - meanWeight)^2;
fish5Var <- (fish5Weight - meanWeight)^2;
# find the variance of the sample
weightVariance <- (fish1Var + fish2Var + fish3Var + fish4Var + fish5Var / 5); # fix variable
# solve for the standard deviation in the fish weight
weightStandardDev <- (weightVariance) ^ (1/2); # add parentheses
# solve for the 95% confidence interval
Z = 1.960;
lowEnd = meanWeight - Z*(weightStandardDev / 5^2); # fix lower case Z, multiply operator
highEnd = meanWeight + Z*(weightStandardDev / 5^2); # fix lower case Z, multiply operator
}
rm(list=ls())
{
rm(list=ls());
options(show.error.locations = TRUE);
fishSpecies <- 'Guppy'; # use single or double quotes
totalValue <- fishSpecies + 10; # error
}
fishSpecies <- Guppy; # error -- need quotations; yields the error.. object 'Guppy' not found
readline('What is your name?')
yourName <- readline('What is your name?')
yourName <- readline('What is your name?')
yourHeight <- readline('What is your heigh in inches?')
yourName <- readline('What is your name?')
yourHeight <- readline('What is your heigh in inches?')
yourHeight <- as.numeric(yourHeight);
test <- readline('What were the temperatues that week')
clear
rm(test)
cat("Hello, World!");
cat(hello)
cat("Hello, World!");
cat("How are you?");
cat("I am fine.");
cat("Hello, World!");
cat("How are you?");
cat("I am fine.");
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!");
cat("How are you?");
cat("I am fine.");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
cat("Hello, World!\nHow are you?\n I am fine.\n")
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
cat("Hello, World!\nHow are you?\nI am fine.\n")
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# Output messages w/ variables
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
}
print("Your velocity is: ");
print(velocity);
print("miles/hour");
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
# 5.1.
print("Your velocity is: ", velocity, "miles per hour")
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
# 5.1.
print("Your velocity is: ", velocity, "miles per hour");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
# 5.1.
cat("Your velocity is: ", velocity, "miles per hour");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
cat("Your velocity is: ");
cat(velocity);
cat("miles/hour");
# 5.1.
cat("Your velocity is: ", velocity, "miles per hour");
# 5.2.
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1.
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2.
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\Distance: ", distance,
"\Time: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\Distance: ", distance,
"\Time: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\Distance: ", distance,
"\nTime: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\nDistance: ", distance,
"\nTime: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
# Prompt user to input location
tempLoc <- readline("Where were the measurements recorded?: ");
# Prompt user to input recorded measurements
temp1 <- as.numeric(readline("Enter the first measurement: "));
temp2 <- as.numeric(readline("Enter the second measurement: "));
temp3 <- as.numeric(readline("Enter the third measurement: "));
temp4 <- as.numeric(readline("Enter the fourth measurement: "));
temp5 <- as.numeric(readline("Enter the fifth measurement: "));
}
rm(list=ls())
{
rm(list=ls());
options(show.error.locations = TRUE);
# Prompt user to input location
tempLoc <- readline("Where were the measurements recorded?: ");
# Prompt user to input recorded measurements
temp1 <- as.numeric(readline("Enter the first measurement: "));
temp2 <- as.numeric(readline("Enter the second measurement: "));
temp3 <- as.numeric(readline("Enter the third measurement: "));
temp4 <- as.numeric(readline("Enter the fourth measurement: "));
temp5 <- as.numeric(readline("Enter the fifth measurement: "));
# Calculate mean temperature
mnTemp <- sum(temp1, temp2, temp3, temp4, temp5)/5; # n = 5
cat("The temperature measurements are from: ", tempLoc,
"\nThe recorded temperatures are: ", temp1, temp2, temp3, temp4, temp5,
"\nThe mean temperature was: ", mnTemp
)
}
{
rm(list=ls());
options(show.error.locations = TRUE);
# Prompt user to input location
tempLoc <- readline("Where were the measurements recorded?: ");
# Prompt user to input recorded measurements
temp1 <- as.numeric(readline("Enter the first measurement: "));
temp2 <- as.numeric(readline("Enter the second measurement: "));
temp3 <- as.numeric(readline("Enter the third measurement: "));
temp4 <- as.numeric(readline("Enter the fourth measurement: "));
temp5 <- as.numeric(readline("Enter the fifth measurement: "));
# Calculate mean temperature
mnTemp <- sum(temp1, temp2, temp3, temp4, temp5)/5; # n = 5
# Summarize in console
cat("The temperature measurements are from: ", tempLoc,
"\nThe recorded temperatures were: ", temp1, temp2, temp3, temp4, temp5,
"\nThe average temperature was: ", mnTemp, "degrees.")
}
{
rm(list=ls());
options(show.error.locations = TRUE);
# Prompt user to input location
tempLoc <- readline("Where were the measurements recorded?: ");
# Prompt user to input recorded measurements
temp1 <- as.numeric(readline("Enter the first measurement: "));
temp2 <- as.numeric(readline("Enter the second measurement: "));
temp3 <- as.numeric(readline("Enter the third measurement: "));
temp4 <- as.numeric(readline("Enter the fourth measurement: "));
temp5 <- as.numeric(readline("Enter the fifth measurement: "));
# Calculate mean temperature
mnTemp <- sum(temp1, temp2, temp3, temp4, temp5)/5; # n = 5
# Summarize in console
cat("The temperature measurements are from: ", tempLoc,
"\nThe recorded temperatures were: ", temp1, temp2, temp3, temp4, temp5,
"\nThe average temperature was: ", mnTemp)
}
rm(list=ls())
BsM_indfish <- readRDS("C:/Users/beachr/OneDrive - Government of Ontario/Desktop/BsMdata/BsM_indfish.rds")
library(tidyverse)
BsM <- BsM_indfish %>%
filter(WbyName == 'Muskrat L.')
View(BsM)
{
rm(list=ls());
options(show.error.locations = TRUE);
yourAge <- as.numeric(readline("What is your age? "))
if(yourAge < 20)
{
# this codeblock is executed if the condition statement is TRUE
cat("You are only", yourAge, "?\n");
cat("You have your whole life ahead of you!");
}
}
{
rm(list=ls());
options(show.error.locations = TRUE);
yourAge <- as.numeric(readline("What is your age? "))
if(yourAge < 20)
{
# this codeblock is executed if the condition statement is TRUE
cat("You are only", yourAge, "?\n");
cat("You have your whole life ahead of you!");
}
}
install_github("James-Thorson-NOAA/VAST")
install_github("James-Thorson-NOAA/VAST")devtools::install_github("james-thorson/FishLife")
devtools::install_github("james-thorson/FishLife")
library(devtools)
library(tidyverse)
devtools::install_github("james-thorson/FishLife")
install.packages(devtools)
install.packages('devtools')
library(tidyverse)
library(devtools)
devtools::install_github("james-thorson/FishLife")
devtools::install_github("james-thorson/FishLife")
install.packages('Rtools')
install.packages('FishLife')
devtools::install_github("james-thorson/FishLife", force = TRUE)
install.packages(Rtools)
install.packages('Rtools')
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install.packages("TMB")
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
Sys.setenv(PATH=paste0(Sys.getenv("PATH"),";C:\Rtools\bin\"))
clear
load("C:/Users/beachr/OneDrive - Government of Ontario/Desktop/Lingcod_comp_expansion/Data_Geostat.RData")
rm(yourAge)
View(Data_Geostat)
load("C:/Users/beachr/OneDrive - Government of Ontario/Desktop/Lingcod_comp_expansion/Record.RData")
load("C:/Users/beachr/OneDrive - Government of Ontario/Desktop/Lingcod_comp_expansion/opt.RData")
View(Record)
View(Data_Geostat)
load("C:/Users/beachr/OneDrive - Government of Ontario/Desktop/Lingcod_comp_expansion/Kmeans-50.RData")
View(Kmeans)
library(tidyverse)
unique(Data_Geostat$First_stage_expanded_numbers)
unique(Data_Geostat$Length_bin)
install.packages('Rtools')
library(FishStatsUtisl)
library(FishStatsUtils)
install.packages("FishStatsUtils")
