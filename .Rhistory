# create three variables: d, t, and v
# give d and t values and use them to calculate v
d <- 100;
v <- d/t; # error
t <- 20;
}
Sys.time()
{
rm(list=ls()); # clean out the environment
options(show.error.locations = TRUE); # give line numbers on errors
finalDistance <- 100;
initDistance <- 50;
finaltime <- 20; # error on this line
initTime <- 15;
velocity <- (finalDistance - initDistance) / (finaltime / initTime);
}
{
rm(list=ls()); # clean out the environment
options(show.error.locations = TRUE); # give line numbers on errors
finalDistance <- 100;
initDistance <- 50;
finaltime <- 20; #
initTime <- 15;
velocity <- (finalDistance - initDistance) / (finaltime / initTime);
}
{
rm(list=ls()); # clean out the environment
options(show.error.locations = TRUE); # give line numbers on errors
finalDistance <- 100;
initDistance <- 50;
finaltime <- 20; #
initTime <- 15;
velocity <- (finalDistance - initDistance) / (finaltime - initTime);
}
{
rm(list=ls()); # clean out the environment
options(show.error.locations = T); # give line numbers on errors
kineticEnergy <- 50;
mass <- 5;
velocity <- (2*kineticEnergy / mass)^1/2; # still a problem here!
}
{
rm(list=ls()); # clean out the environment
options(show.error.locations = TRUE); # give line numbers on errors
kineticEnergy <- 50;
mass <- 5;
velocity <- (2*kineticEnergy / mass)^2(1/2); # now we are good!
}
{
rm(list=ls()); # clean out the environment
options(show.error.locations = TRUE); # give line numbers on errors
kineticEnergy <- 50;
mass <- 5;
velocity <- (2*kineticEnergy / mass)^2(1/2); # now we are good!
}
{
rm(list=ls()); # clean out the environment
options(show.error.locations = TRUE); # give line numbers on errors
kineticEnergy <- 50;
mass <- 5;
velocity <- (2*kineticEnergy / mass)^2(1/2); # now we are good!
}
kineticEnergy <- 50;
mass <- 5;
velocity <- (2*kineticEnergy / mass)^2(1/2); # now we are good!
{
rm(list=ls()); # clean out the environment
options(show.error.locations = TRUE); # give line numbers on errors
kineticEnergy <- 50;
mass <- 5;
velocity <- (2*kineticEnergy / mass)^(1/2)
}
fishLength <- c(25, 26, 20, 22, 32); # length of fish (n = 5) in centimetres
rm(list=ls())
fishLength <- c(25, 26, 20, 22, 32); # length of fish (n = 5) in centimetres
mean(fishLength)
var(fishLength)
clear
sum(fishLength)
meanLength <- (sum(fishLength))/(length(fishLength))
rm(list=ls())
meanLength <- (25+26+20+22+32)/5
rm(meanLength)
mean(fishLength)
fishLength <- c(25, 26, 20, 22, 32); # length of fish (n = 5) in centimetres
mean(fishLength)
rm(list=ls())
fishLength <- c(25, 26, 20, 22, 32); # length of fish (n = 5) in centimetres
test <- var(fishLength)
varLength <- ((25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2)/5
var(fishLength)
rm(varLength)
((25-25)^2) + ((26-26)^2) + ((20-25)^2) + ((22-25)^2) + ((32-25)^2)/5
(25-25)^2) + (26-26)^2) + (20-25)^2) + (22-25)^2) + (32-25)^2)/5
((25-25)^2 + (26-26)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2)/5
var(fishLength)
((25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2)/5
mean(fishLength)
var(fishLength)
(25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2/5
sd(fishLength)
mean(fishLength)
sum(fishLength)
25+26+20+22+32
sum(fishLength)^2/5
mean(fishLength)
(25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2 / 5
var(fishLength)
?var
(25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2/5
((25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2)/5
var(fishLength, y = 5)
sd(fishLength)
varLength <- ((25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2)/5 # variance
sqrt(var(varLength))
sqrt(varLength)
var(fishLength)
sqrt(2)
sqrt(21)
sqrt(16.8)
sd(fishLength)
var(fishLength)
varLength <- ((25-25)^2 + (26-25)^2 + (20-25)^2 + (22-25)^2 + (32-25)^2)/5 # variance
sqrtLength <- sqrt(varLength) #
try <- var(fishLength)
rm(test,try)
sd(fishLength)
sd(fishLength, na.rm = T)
min(fishLength)
max(fishLength)
test <- data.frame(length = c(25,26,20,22,32))
sd(test$length)
var(test$length)
fish1 <- 25;
fish2 <- 26;
fish3 <- 20;
fish4 <- 22;
fish5 <- 32;
mnLength <- (fish1 + fish2 + fish3 + fish4 + fish5) / 5; # mean length
mnLength <- (fish1 + fish2 + fish3 + fish4 + fish5) / 5; # mean length
varLength <- ((fish1 - mnLength)^2 + (fish2 - mnLength)^2 + (fish3 - mnLength)^2 + (fish4 - mnLength)^2 + (fish5 - mnLength)^2) / 5; # variance
((fish1 - mnLength)^2 + (fish2 - mnLength)^2 + (fish3 - mnLength)^2 + (fish4 - mnLength)^2 + (fish5 - mnLength)^2) / 5; # variance
var(c(fish1,fish2,fish3,fish4,fish5))
sqrt(varLength)
varLength^1/2
varLength^(1/2)
sdLength <- sqrt(varLength) # standard deviation, OR simply, square root of the variance
rm(list=ls())
{
rm(list=ls()); # clean out the environment
options(show.error.locations = T); # give line numbers on errors
# Individual Fish Length (cm) Values:
fish1 <- 25;
fish2 <- 26;
fish3 <- 20;
fish4 <- 22;
fish5 <- 32;
# Calculate Mean
mnLength <- (fish1 + fish2 + fish3 + fish4 + fish5) / 5; # mean length
# Calculate Variance
varLength <- ((fish1 - mnLength)^2 + (fish2 - mnLength)^2 + (fish3 - mnLength)^2 + (fish4 - mnLength)^2 + (fish5 - mnLength)^2) / 5; # variance
# Calculate Standard Deviation
sdLength <- sqrt(varLength) # standard deviation, OR simply, square root of the variance
# OR varLength^(1/2)
}
rm(list=ls())
{
rm(list=ls()) # clean out the environment
options(show.error.locations = TRUE) # give line numbers on errors
fish1Weight <- 45
fish2Weight <- 64
fish3Weight <- 50
fish4Weight <- 58
fish5Weight <- 49
# solve for the mean fish weight
meanWeight <- fish1Weight + fish2Weight + fish3Weight + fish4Weight + fish5Weight / 5
# solve for the variance of each fish
fish1Var <- (fish1Weight - meanWeight)^2
fish2Var <- (fish1Weight - meanWeight)^2
fish3Var <- (fish1Weight - meanWeight)^2
fish4Var <- (fish1Weight - meanWeight)^2
fish5Var <- (fish1Weight - meanWeight)^2
# find the variance of the sample
weightVariance <- (fish1Var + fish2Var + fish3Var + fish4Var + fish5Var / 5)
# solve for the standard deviation in the fish weight
weightStandardDev == (weightVariance) ^ 1/2
# solve for the 95% CI
Z <- 1.960;
lowEnd <- meanWeight - z(weightStandardDev / 5^2)
highEnd <- meanWeight + z(weightStandardDev / 5^2)
}
rm(list=ls())
{
rm(list=ls());                       # clean out the environment
options(show.error.locations = TRUE);  # give line numbers on errors
fish1Weight <- 45;
fish2Weight <- 64;
fish3Weight <- 50;
fish4Weight <- 58;
fish5Weight <- 49;
# solve for the mean fish weight
meanWeight <- (fish1Weight + fish2Weight + fish3Weight + fish4Weight + fish5Weight) /5;
# solve the variance for each fish
fish1Var <- (fish1Weight - meanWeight)^2;
fish2Var <- (fish2Weight - meanWeight)^2;
fish3Var <- (fish3Weight - meanWeight)^2;
fish4Var <- (fish4Weight - meanWeight)^2;
fish5Var <- (fish5Weight - meanWeight)^2;
# find the variance of the sample
weightVariance <- (fish1Var + fish2Var + fish3Var + fish4Var + fish5Var / 5); # fix variable
# solve for the standard deviation in the fish weight
weightStandardDev <- (weightVariance) ^ (1/2); # add parentheses
# solve for the 95% confidence interval
Z = 1.960;
lowEnd = meanWeight - Z*(weightStandardDev / 5^2); # fix lower case Z, multiply operator
highEnd = meanWeight + Z*(weightStandardDev / 5^2); # fix lower case Z, multiply operator
}
rm(list=ls())
{
rm(list=ls());
options(show.error.locations = TRUE);
fishSpecies <- 'Guppy'; # use single or double quotes
totalValue <- fishSpecies + 10; # error
}
fishSpecies <- Guppy; # error -- need quotations; yields the error.. object 'Guppy' not found
readline('What is your name?')
yourName <- readline('What is your name?')
yourName <- readline('What is your name?')
yourHeight <- readline('What is your heigh in inches?')
yourName <- readline('What is your name?')
yourHeight <- readline('What is your heigh in inches?')
yourHeight <- as.numeric(yourHeight);
test <- readline('What were the temperatues that week')
clear
rm(test)
cat("Hello, World!");
cat(hello)
cat("Hello, World!");
cat("How are you?");
cat("I am fine.");
cat("Hello, World!");
cat("How are you?");
cat("I am fine.");
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!");
cat("How are you?");
cat("I am fine.");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
cat("Hello, World!\nHow are you?\n I am fine.\n")
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
cat("Hello, World!\nHow are you?\nI am fine.\n")
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# Output messages w/ variables
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
}
print("Your velocity is: ");
print(velocity);
print("miles/hour");
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
# 5.1.
print("Your velocity is: ", velocity, "miles per hour")
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
# 5.1.
print("Your velocity is: ", velocity, "miles per hour");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
print("Your velocity is: ");
print(velocity);
print("miles/hour");
# 5.1.
cat("Your velocity is: ", velocity, "miles per hour");
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
cat("Your velocity is: ");
cat(velocity);
cat("miles/hour");
# 5.1.
cat("Your velocity is: ", velocity, "miles per hour");
# 5.2.
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0.
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0.
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1.
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2.
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\Distance: ", distance,
"\Time: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\Distance: ", distance,
"\Time: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\Distance: ", distance,
"\nTime: ", time, "\nVelocity: ", velocity);
}
{
rm(list=ls());
options(show.error.locations = TRUE);
cat("Hello, World!\n");
cat("How are you?\n");
cat("I am fine.\n");
# Similar to above, but in one line of code:
cat("Hello, World!\nHow are you?\nI am fine.\n");
# 4.0. ----
distance <- 100;
time <- 50;
velocity <- distance/time;
print(velocity);
# 5.0. ----
# cat("Your velocity is: ");
# cat(velocity);
# cat("miles/hour");
# 5.1. ----
# cat("Your velocity is: ", velocity, "miles per hour");
# 5.2. ----
cat("The values are: ", "\nDistance: ", distance, "\nTime: ", time, "\nVelocity: ", velocity);
# 6.0. ----
cat("The values are: ", "\nDistance: ", distance,
"\nTime: ", time, "\nVelocity: ", velocity);
}
